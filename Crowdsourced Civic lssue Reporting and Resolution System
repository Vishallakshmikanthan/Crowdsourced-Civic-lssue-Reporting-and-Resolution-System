// ============================================
// STEP 1: Create a new React project
// ============================================
// Run these commands in your terminal:
// npx create-react-app civic-issue-app
// cd civic-issue-app
// npm install lucide-react
// npm install -D tailwindcss postcss autoprefixer
// npx tailwindcss init -p

// ============================================
// FILE: package.json (UPDATE YOUR EXISTING ONE)
// ============================================
{
  "name": "civic-issue-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "lucide-react": "^0.263.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.7",
    "postcss": "^8.4.14",
    "tailwindcss": "^3.1.6"
  }
}

// ============================================
// FILE: tailwind.config.js
// ============================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

// ============================================
// FILE: src/index.css
// ============================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-out;
}

.animate-slide-in {
  animation: slideIn 0.3s ease-out;
}

// ============================================
// FILE: src/App.js (COMPLETE CODE)
// ============================================
import React, { useState, useEffect, useRef } from 'react';
import { 
  MapPin, Camera, Users, Trophy, Bell, Search, Filter, 
  ThumbsUp, Flag, CheckCircle, Clock, Star, 
  ArrowLeft, Plus, Settings, Home, FileText, Target 
} from 'lucide-react';

const CivicIssueApp = () => {
  const [currentView, setCurrentView] = useState('home');
  const [reports, setReports] = useState([]);
  const [userPoints, setUserPoints] = useState(150);
  const [newReport, setNewReport] = useState({
    location: '',
    description: '',
    image: null,
    priority: 'medium',
    anonymous: false,
    category: 'infrastructure'
  });
  const [aggregateRecords, setAggregateRecords] = useState([]);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [userRole, setUserRole] = useState('citizen');
  const [searchTerm, setSearchTerm] = useState('');
  const [notifications] = useState(3);
  const fileInputRef = useRef(null);

  // Sample data initialization
  useEffect(() => {
    setAggregateRecords([
      {
        id: 1,
        title: "Pothole on Main Street",
        location: "Main Street, Sector 15",
        priority: "high",
        status: "in_progress",
        progress: 65,
        reportsCount: 12,
        likes: 8,
        category: "infrastructure",
        timeRemaining: "2 days",
        lastUpdate: "Municipality team assigned",
        createdAt: new Date(Date.now() - 86400000 * 3),
        updatedAt: new Date(Date.now() - 86400000 * 1)
      },
      {
        id: 2,
        title: "Broken Street Light",
        location: "Park Avenue, Block A",
        priority: "medium",
        status: "pending",
        progress: 20,
        reportsCount: 5,
        likes: 3,
        category: "lighting",
        timeRemaining: "5 days",
        lastUpdate: "Report received",
        createdAt: new Date(Date.now() - 86400000 * 5),
        updatedAt: new Date(Date.now() - 86400000 * 2)
      },
      {
        id: 3,
        title: "Garbage Dump Issue",
        location: "Green Valley Road",
        priority: "high",
        status: "overdue",
        progress: 10,
        reportsCount: 18,
        likes: 15,
        category: "sanitation",
        timeRemaining: "Overdue by 3 days",
        lastUpdate: "Escalated to supervisor",
        createdAt: new Date(Date.now() - 86400000 * 7),
        updatedAt: new Date(Date.now() - 86400000 * 3)
      },
      {
        id: 4,
        title: "Water Leakage",
        location: "Central Plaza",
        priority: "high",
        status: "completed",
        progress: 100,
        reportsCount: 8,
        likes: 12,
        category: "water",
        timeRemaining: "Completed",
        lastUpdate: "Issue resolved successfully",
        createdAt: new Date(Date.now() - 86400000 * 10),
        updatedAt: new Date(Date.now() - 86400000 * 1)
      }
    ]);
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewReport(prev => ({ ...prev, image: file }));
    }
  };

  const submitReport = () => {
    if (!newReport.location.trim() || !newReport.description.trim()) {
      alert('Please fill in all required fields');
      return;
    }
    
    const report = {
      id: Date.now(),
      ...newReport,
      timestamp: new Date(),
      status: 'submitted',
      progress: 0,
      reportsCount: 1,
      likes: 0,
      timeRemaining: "7 days",
      lastUpdate: "Report submitted",
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setReports(prev => [report, ...prev]);
    setUserPoints(prev => prev + 10);
    setAggregateRecords(prev => [report, ...prev]);
    
    // Reset form
    setNewReport({
      location: '',
      description: '',
      image: null,
      priority: 'medium',
      anonymous: false,
      category: 'infrastructure'
    });
    
    alert('Report submitted successfully! You earned 10 points.');
    setCurrentView('topics');
  };

  const likeRecord = (id) => {
    setAggregateRecords(prev => 
      prev.map(record => 
        record.id === id 
          ? { ...record, likes: record.likes + 1 }
          : record
      )
    );
  };

  const updateProgress = (id, newProgress, newStatus) => {
    setAggregateRecords(prev => 
      prev.map(record => 
        record.id === id 
          ? { 
              ...record, 
              progress: newProgress, 
              status: newStatus,
              lastUpdate: `Progress updated to ${newProgress}%`,
              updatedAt: new Date()
            }
          : record
      )
    );
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'completed': return 'bg-green-500';
      case 'in_progress': return 'bg-blue-500';
      case 'pending': return 'bg-yellow-500';
      case 'overdue': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const filteredRecords = aggregateRecords.filter(record =>
    record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderHeader = () => (
    <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg sticky top-0 z-40">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="bg-white/20 p-2 rounded-full">
            <Target className="w-6 h-6" />
          </div>
          <div>
            <h1 className="text-xl font-bold">CivicConnect</h1>
            <p className="text-sm opacity-90">Report. Track. Resolve.</p>
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2 bg-white/20 px-3 py-1 rounded-full">
            <Trophy className="w-4 h-4" />
            <span className="font-semibold">{userPoints}</span>
          </div>
          <div className="relative">
            <Bell className="w-6 h-6 cursor-pointer hover:scale-110 transition-transform" />
            {notifications > 0 && (
              <div className="absolute -top-1 -right-1 bg-red-500 text-xs rounded-full w-5 h-5 flex items-center justify-center">
                {notifications}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderBottomNav = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg z-40">
      <div className="flex justify-around py-2">
        {[
          { id: 'home', icon: Home, label: 'Home' },
          { id: 'report', icon: Plus, label: 'Report' },
          { id: 'topics', icon: FileText, label: 'Topics' },
          { id: userRole === 'municipality' ? 'dashboard' : 'profile', icon: Settings, label: userRole === 'municipality' ? 'Dashboard' : 'Profile' }
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => setCurrentView(tab.id)}
            className={`flex flex-col items-center p-3 rounded-lg transition-all duration-200 ${
              currentView === tab.id 
                ? 'text-blue-600 bg-blue-50 scale-105' 
                : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
            }`}
          >
            <tab.icon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">{tab.label}</span>
          </button>
        ))}
      </div>
    </div>
  );

  const renderHome = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      <div className="bg-gradient-to-br from-blue-50 to-indigo-100 p-6 rounded-xl shadow-sm">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          Welcome, {userRole === 'municipality' ? 'Municipality' : 'Citizen'}!
        </h2>
        <p className="text-gray-600 mb-4">
          {userRole === 'municipality' 
            ? 'Manage and resolve community issues efficiently.' 
            : 'Help make your community better by reporting civic issues.'}
        </p>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{reports.length}</div>
            <div className="text-sm text-gray-600">
              {userRole === 'municipality' ? 'Total Reports' : 'Your Reports'}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-green-600">
              {userRole === 'municipality' 
                ? aggregateRecords.filter(r => r.status === 'completed').length
                : userPoints
              }
            </div>
            <div className="text-sm text-gray-600">
              {userRole === 'municipality' ? 'Resolved' : 'Points Earned'}
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Quick Actions</h3>
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => setCurrentView('report')}
            className="bg-blue-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105 active:scale-95"
          >
            <Plus className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">Report Issue</span>
          </button>
          <button
            onClick={() => setCurrentView('topics')}
            className="bg-green-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105 active:scale-95"
          >
            <FileText className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">View Topics</span>
          </button>
        </div>
      </div>

      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Recent Activity</h3>
        <div className="space-y-2">
          {aggregateRecords.slice(0, 4).map((record) => (
            <div key={record.id} className="bg-white p-4 rounded-lg shadow-sm border hover:shadow-md transition-all duration-200 cursor-pointer"
                 onClick={() => setSelectedRecord(record)}>
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium text-gray-800">{record.title}</h4>
                  <p className="text-sm text-gray-600 flex items-center mt-1">
                    <MapPin className="w-3 h-3 mr-1" />
                    {record.location}
                  </p>
                </div>
                <div className="flex items-center space-x-2">
                  <div className={`w-3 h-3 rounded-full ${getStatusColor(record.status)}`}></div>
                  <span className="text-xs text-gray-500">{record.progress}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderReport = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      <div className="flex items-center space-x-3 mb-4">
        <button
          onClick={() => setCurrentView('home')}
          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
        </button>
        <h2 className="text-xl font-bold text-gray-800">Report an Issue</h2>
      </div>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
          <select
            value={newReport.category}
            onChange={(e) => setNewReport(prev => ({ ...prev, category: e.target.value }))}
            className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
          >
            <option value="infrastructure">🏗️ Infrastructure</option>
            <option value="sanitation">🗑️ Sanitation</option>
            <option value="lighting">💡 Street Lighting</option>
            <option value="water">💧 Water Supply</option>
            <option value="traffic">🚦 Traffic</option>
            <option value="environment">🌱 Environment</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Location *</label>
          <div className="relative">
            <MapPin className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="text"
              value={newReport.location}
              onChange={(e) => setNewReport(prev => ({ ...prev, location: e.target.value }))}
              placeholder="Enter location or use current location"
              className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              required
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Description *</label>
          <textarea
            value={newReport.description}
            onChange={(e) => setNewReport(prev => ({ ...prev, description: e.target.value }))}
            placeholder="Describe the issue in detail..."
            className="w-full p-3 border rounded-lg h-24 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Upload Photo</label>
          <div
            onClick={() => fileInputRef.current?.click()}
            className="w-full p-6 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 hover:bg-blue-50 transition-all text-center group"
          >
            <Camera className="w-8 h-8 mx-auto mb-2 text-gray-400 group-hover:text-blue-500 transition-colors" />
            <p className="text-sm text-gray-600 group-hover:text-blue-600 transition-colors">
              {newReport.image ? (
                <span className="text-green-600">📸 {newReport.image.name}</span>
              ) : (
                "Tap to add photo (with geotag)"
              )}
            </p>
          </div>
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="hidden"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Priority Level</label>
          <div className="grid grid-cols-3 gap-2">
            {[
              { value: 'low', label: 'Low', emoji: '🟢' },
              { value: 'medium', label: 'Medium', emoji: '🟡' },
              { value: 'high', label: 'High', emoji: '🔴' }
            ].map((priority) => (
              <button
                key={priority.value}
                type="button"
                onClick={() => setNewReport(prev => ({ ...prev, priority: priority.value }))}
                className={`p-3 rounded-lg border font-medium transition-all text-center ${
                  newReport.priority === priority.value
                    ? 'border-blue-500 bg-blue-50 text-blue-700 scale-105'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <div className="text-lg">{priority.emoji}</div>
                <div className="text-sm">{priority.label}</div>
              </button>
            ))}
          </div>
        </div>

        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="anonymous"
              checked={newReport.anonymous}
              onChange={(e) => setNewReport(prev => ({ ...prev, anonymous: e.target.checked }))}
              className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
            />
            <label htmlFor="anonymous" className="text-sm font-medium text-gray-700 cursor-pointer">
              Report anonymously
            </label>
          </div>
        </div>

        <button
          onClick={submitReport}
          disabled={!newReport.location.trim() || !newReport.description.trim()}
          className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95 duration-200"
        >
          {!newReport.location.trim() || !newReport.description.trim() 
            ? 'Please fill required fields' 
            : '🚀 Submit Report (+10 points)'}
        </button>
      </div>
    </div>
  );

  const renderTopics = () => (
    <div className="p-4 pb-20 space-y-4 animate-fade-in">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-800">Community Issues</h2>
        <button className="p-2 hover:bg-gray-100 rounded-full transition-colors">
          <Filter className="w-5 h-5" />
        </button>
      </div>

      <div className="relative">
        <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search issues..."
          className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
        />
      </div>

      <div className="space-y-4">
        {filteredRecords.map((record) => (
          <div
            key={record.id}
            className="bg-white rounded-xl shadow-sm border hover:shadow-md transition-all duration-200 overflow-hidden"
          >
            <div className="p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-800 mb-1">{record.title}</h3>
                  <p className="text-sm text-gray-600 flex items-center">
                    <MapPin className="w-4 h-4 mr-1" />
                    {record.location}
                  </p>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getPriorityColor(record.priority)}`}>
                  {record.priority.toUpperCase()}
                </span>
              </div>

              <div className="mb-3">
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-600">Progress</span>
                  <span className="font-medium">{record.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-500 ${getStatusColor(record.status)}`}
                    style={{ width: `${record.progress}%` }}
                  ></div>
                </div>
              </div>

              <div className="flex items-center justify-between text-sm mb-3">
                <span className="text-gray-600">{record.lastUpdate}</span>
                <span className={`font-medium ${record.status === 'overdue' ? 'text-red-600' : 'text-gray-600'}`}>
                  {record.timeRemaining}
                </span>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => likeRecord(record.id)}
                    className="flex items-center space-x-1 text-gray-600 hover:text-blue-600 transition-colors"
                  >
                    <ThumbsUp className="w-4 h-4" />
                    <span className="text-sm">{record.likes}</span>
                  </button>
                  <span className="flex items-center space-x-1 text-gray-600">
                    <Users className="w-4 h-4" />
                    <span className="text-sm">{record.reportsCount}</span>
                  </span>
                </div>
                <button
                  onClick={() => setSelectedRecord(record)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                >
                  View Details
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderProfile = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      <h2 className="text-xl font-bold text-gray-800">Profile</h2>
      
      <div className="bg-gradient-to-r from-blue-50 to-indigo-100 p-6 rounded-xl">
        <div className="text-center">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold text-xl mx-auto mb-3">
            {userRole === 'municipality' ? 'M' : 'C'}
          </div>
          <h3 className="text-lg font-semibold text-gray-800">
            {userRole === 'municipality' ? 'Municipal Staff' : 'Active Citizen'}
          </h3>
          <p className="text-gray-600 mb-4">Making a difference in the community</p>
          <div className="flex justify-center items-center space-x-2 text-yellow-600">
            <Star className="w-5 h-5 fill-current" />
            <span className="font-semibold">{userPoints} Points</span>
          </div>
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h3 className="font-medium text-gray-800 mb-3">User Role</h3>
        <div className="flex space-x-2">
          <button
            onClick={() => setUserRole('citizen')}
            className={`flex-1 p-3 rounded-lg font-medium transition-all ${
              userRole === 'citizen'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            Citizen
          </button>
          <button
            onClick={() => setUserRole('municipality')}
            className={`flex-1 p-3 rounded-lg font-medium transition-all ${
              userRole === 'municipality'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            Municipality
          </button>
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h3 className="font-medium text-gray-800 mb-3">Statistics</h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{reports.length}</div>
            <div className="text-sm text-gray-600">Reports Submitted</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">{userPoints}</div>
            <div className="text-sm text-gray-600">Points Earned</div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderDashboard = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      <h2 className="text-xl font-bold text-gray-800">Municipality Dashboard</h2>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-blue-600">{aggregateRecords.length}</div>
          <div className="text-sm text-gray-600">Active Issues</div>
        </div>
        <div className="bg-red-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-red-600">
            {aggregateRecords.filter(r => r.status === 'overdue').length}
          </div>
          <div className="text-sm text-gray-600">Overdue</div>
        </div>
      </div>

      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-800">Manage Issues</h3>
        {aggregateRecords.map((record) => (
          <div key={record.id} className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium">{record.title}</h4>
              <span className={`px-2 py-1 rounded text-xs ${
                record.status === 'overdue' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'
              }`}>
                {record.status.replace('_', ' ').toUpperCase()}
              </span>
            </div>
            <p className="text-sm text-gray-600 mb-3">{record.location}</p>
            <div className="mb-3">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`h-2 rounded-full ${getStatusColor(record.status)}`}
                  style={{ width: `${record.progress}%` }}
                ></div>
              </div>
              <div className="text-xs text-gray-600 mt-1">{record.progress}% Complete</div>
            </div>
            <div className="flex items-center space-x-2">
              <button 
                onClick={() => updateProgress(record.id, Math.min(record.progress + 25, 100), record.progress >= 75 ? 'completed' : 'in_progress')}
                className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition-colors"
              >
                Update Progress
              </button>
              <button 
                onClick={() => updateProgress(record.id, 100, 'completed')}
                className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors"
              >
                Mark Complete
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="max-w-md mx-auto bg-gray-50 min-h-screen">
      {renderHeader()}
      
      <div className="overflow-y-auto">
        {currentView === 'home' && renderHome()}
        {currentView === 'report' && renderReport()}
        {currentView === 'topics' && renderTopics()}
        {currentView === 'dashboard' && userRole === 'municipality' && renderDashboard()}
        {currentView === 'profile' && renderProfile()}
      </div>
      
      {renderBottomNav()}
      
      {/* Detail Modal */}
      {selectedRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-sm w-full max-h-96 overflow-y-auto">
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold">{selectedRecord.title}</h3>
                <button
                  onClick={() => setSelectedRecord(null)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors text-2xl leading-none"
                >
                  ×
                </button>
              </div>
              <p className="text-gray-600 mb-4 flex items-center">
                <MapPin className="w-4 h-4 mr-2" />
                {selectedRecord.location}
              </p>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Category:</span>
                  <span className="text-sm bg-gray-100 px-2 py-1 rounded capitalize">
                    {selectedRecord.category}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Priority:</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium border ${getPriorityColor(selectedRecord.priority)}`}>
                    {selectedRecord.priority.toUpperCase()}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Status:</span>
                  <span className="text-sm capitalize">{selectedRecord.status.replace('_', ' ')}</span>
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span className="font-medium">Progress:</span>
                    <span>{selectedRecord.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full ${getStatusColor(selectedRecord.status)}`}
                      style={{ width: `${selectedRecord.progress}%` }}
                    ></div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Reports:</span>
                  <span className="text-sm">{selectedRecord.reportsCount}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Community Support:</span>
                  <span className="text-sm">{selectedRecord.likes} likes</span>
                </div>
                <div>
                  <span className="text-sm font-medium">Last Update:</span>
                  <p className="text-sm text-gray-600 mt-1">{selectedRecord.lastUpdate}</p>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Time Remaining:</span>
                  <span className={`text-sm ${selectedRecord.status === 'overdue' ? 'text-red-600 font-medium' : 'text-gray-600'}`}>
                    {selectedRecord.timeRemaining}
                  </span>
                </div>
              </div>
              
              <div className="mt-6 pt-4 border-t">
                <div className="flex space-x-2">
                  <button
                    onClick={() => {
                      likeRecord(selectedRecord.id);
                      setSelectedRecord({...selectedRecord, likes: selectedRecord.likes + 1});
                    }}
                    className="flex-1 px-4 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium"
                  >
                    👍 Support ({selectedRecord.likes})
                  </button>
                  <button className="flex-1 px-4 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition-colors text-sm font-medium">
                    🚩 Report Issue
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CivicIssueApp;

// ============================================
// FILE: src/index.js
// ============================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// ============================================
// FILE: public/index.html
// ============================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="CivicConnect - Crowdsourced Civic Issue Reporting System" />
    <title>CivicConnect - Report Civic Issues</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

// ============================================
// DEPLOYMENT STEPS FOR VERCEL
// ============================================

/*
STEP-BY-STEP DEPLOYMENT GUIDE:

1. CREATE REACT PROJECT:
   npx create-react-app civic-issue-app
   cd civic-issue-app

2. INSTALL DEPENDENCIES:
   npm install lucide-react
   npm install -D tailwindcss postcss autoprefixer
   npx tailwindcss init -p

3. REPLACE FILES:
   - Replace src/App.js with the complete code above
   - Replace src/index.js with the code above
   - Replace src/index.css with the CSS code above
   - Replace public/index.html with the HTML code above
   - Replace tailwind.config.js with the config above
   - Update package.json with the dependencies above

4. TEST LOCALLY:
   npm start

5. DEPLOY TO VERCEL:
   Method A - GitHub (Recommended):
   - Push your code to GitHub
   - Connect your GitHub repo to Vercel
   - Deploy automatically

   Method B - Vercel CLI:
   npm i -g vercel
   vercel

   Method C - Direct Upload:
   - Build the project: npm run build
   - Upload the 'build' folder to Vercel

6. ENVIRONMENT VARIABLES (if needed):
   - No special environment variables required for this app

7. CUSTOM DOMAIN (optional):
   - Add your custom domain in Vercel dashboard

TROUBLESHOOTING:
- If you get 404 errors, make sure all files are in correct locations
- If styles don't load, ensure Tailwind CSS is properly configured
- If icons don't show, verify lucide-react is installed correctly
- For mobile responsiveness issues, check viewport meta tag

The app will be fully functional with:
✅ Issue reporting with photo upload
✅ Progress tracking with visual indicators  
✅ Community interaction (likes, comments)
✅ Municipality dashboard
✅ Points/gamification system
✅ Search and filtering
✅ Responsive mobile design
✅ Smooth animations and transitions
*/

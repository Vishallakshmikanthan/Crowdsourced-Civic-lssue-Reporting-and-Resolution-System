import React, { useState, useEffect, useRef } from 'react';
import { MapPin, Camera, Users, Trophy, MessageCircle, Bell, Search, Filter, ThumbsUp, Flag, Upload, CheckCircle, Clock, AlertTriangle, Star, ArrowLeft, ArrowRight, Plus, Settings, Home, FileText, Target } from 'lucide-react';

const CivicIssueApp = () => {
  const [currentView, setCurrentView] = useState('home');
  const [reports, setReports] = useState([]);
  const [userPoints, setUserPoints] = useState(150);
  const [newReport, setNewReport] = useState({
    location: '',
    description: '',
    image: null,
    priority: 'medium',
    anonymous: false,
    category: 'infrastructure'
  });
  const [aggregateRecords, setAggregateRecords] = useState([]);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [userRole, setUserRole] = useState('citizen');
  const [searchTerm, setSearchTerm] = useState('');
  const fileInputRef = useRef(null);

  // Sample data initialization
  useEffect(() => {
    setAggregateRecords([
      {
        id: 1,
        title: "Pothole on Main Street",
        location: "Main Street, Sector 15",
        priority: "high",
        status: "in_progress",
        progress: 65,
        reportsCount: 12,
        likes: 8,
        category: "infrastructure",
        timeRemaining: "2 days",
        lastUpdate: "Municipality team assigned",
        images: ["pothole1.jpg"]
      },
      {
        id: 2,
        title: "Broken Street Light",
        location: "Park Avenue, Block A",
        priority: "medium",
        status: "pending",
        progress: 20,
        reportsCount: 5,
        likes: 3,
        category: "lighting",
        timeRemaining: "5 days",
        lastUpdate: "Report received",
        images: ["streetlight1.jpg"]
      },
      {
        id: 3,
        title: "Garbage Dump Issue",
        location: "Green Valley Road",
        priority: "high",
        status: "overdue",
        progress: 10,
        reportsCount: 18,
        likes: 15,
        category: "sanitation",
        timeRemaining: "Overdue by 3 days",
        lastUpdate: "Escalated to supervisor",
        images: ["garbage1.jpg"]
      }
    ]);
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewReport(prev => ({ ...prev, image: file }));
    }
  };

  const submitReport = () => {
    if (!newReport.location || !newReport.description) {
      alert('Please fill in all required fields');
      return;
    }
    
    const report = {
      id: Date.now(),
      ...newReport,
      timestamp: new Date(),
      status: 'submitted'
    };
    
    setReports(prev => [report, ...prev]);
    setUserPoints(prev => prev + 10);
    setNewReport({
      location: '',
      description: '',
      image: null,
      priority: 'medium',
      anonymous: false,
      category: 'infrastructure'
    });
    
    alert('Report submitted successfully! You earned 10 points.');
    setCurrentView('topics');
  };

  const likeRecord = (id) => {
    setAggregateRecords(prev => 
      prev.map(record => 
        record.id === id 
          ? { ...record, likes: record.likes + 1 }
          : record
      )
    );
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'completed': return 'bg-green-500';
      case 'in_progress': return 'bg-blue-500';
      case 'pending': return 'bg-yellow-500';
      case 'overdue': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const filteredRecords = aggregateRecords.filter(record =>
    record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.location.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderHeader = () => (
    <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="bg-white/20 p-2 rounded-full">
            <Target className="w-6 h-6" />
          </div>
          <div>
            <h1 className="text-xl font-bold">CivicConnect</h1>
            <p className="text-sm opacity-90">Report. Track. Resolve.</p>
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2 bg-white/20 px-3 py-1 rounded-full">
            <Trophy className="w-4 h-4" />
            <span className="font-semibold">{userPoints}</span>
          </div>
          <div className="relative">
            <Bell className="w-6 h-6 cursor-pointer hover:scale-110 transition-transform" />
            <div className="absolute -top-1 -right-1 bg-red-500 text-xs rounded-full w-5 h-5 flex items-center justify-center">
              3
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderBottomNav = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg">
      <div className="flex justify-around py-2">
        {[
          { id: 'home', icon: Home, label: 'Home' },
          { id: 'report', icon: Plus, label: 'Report' },
          { id: 'topics', icon: FileText, label: 'Topics' },
          { id: userRole === 'municipality' ? 'dashboard' : 'profile', icon: Settings, label: userRole === 'municipality' ? 'Dashboard' : 'Profile' }
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => setCurrentView(tab.id)}
            className={`flex flex-col items-center p-3 rounded-lg transition-all duration-200 ${
              currentView === tab.id 
                ? 'text-blue-600 bg-blue-50 scale-105' 
                : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
            }`}
          >
            <tab.icon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">{tab.label}</span>
          </button>
        ))}
      </div>
    </div>
  );

  const renderHome = () => (
    <div className="p-4 pb-20 space-y-6">
      {/* Welcome Section */}
      <div className="bg-gradient-to-br from-blue-50 to-indigo-100 p-6 rounded-xl">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">Welcome, Citizen!</h2>
        <p className="text-gray-600 mb-4">Help make your community better by reporting civic issues.</p>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{reports.length}</div>
            <div className="text-sm text-gray-600">Your Reports</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-green-600">{userPoints}</div>
            <div className="text-sm text-gray-600">Points Earned</div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Quick Actions</h3>
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => setCurrentView('report')}
            className="bg-blue-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <Plus className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">Report Issue</span>
          </button>
          <button
            onClick={() => setCurrentView('topics')}
            className="bg-green-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <FileText className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">View Topics</span>
          </button>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Recent Activity</h3>
        <div className="space-y-2">
          {aggregateRecords.slice(0, 3).map((record) => (
            <div key={record.id} className="bg-white p-4 rounded-lg shadow-sm border hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium text-gray-800">{record.title}</h4>
                  <p className="text-sm text-gray-600">{record.location}</p>
                </div>
                <div className={`w-3 h-3 rounded-full ${getStatusColor(record.status)}`}></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderReport = () => (
    <div className="p-4 pb-20 space-y-6">
      <div className="flex items-center space-x-3 mb-4">
        <button
          onClick={() => setCurrentView('home')}
          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
        </button>
        <h2 className="text-xl font-bold text-gray-800">Report an Issue</h2>
      </div>

      <div className="space-y-4">
        {/* Category Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
          <select
            value={newReport.category}
            onChange={(e) => setNewReport(prev => ({ ...prev, category: e.target.value }))}
            className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="infrastructure">Infrastructure</option>
            <option value="sanitation">Sanitation</option>
            <option value="lighting">Street Lighting</option>
            <option value="water">Water Supply</option>
            <option value="traffic">Traffic</option>
            <option value="environment">Environment</option>
          </select>
        </div>

        {/* Location Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Location *</label>
          <div className="relative">
            <MapPin className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="text"
              value={newReport.location}
              onChange={(e) => setNewReport(prev => ({ ...prev, location: e.target.value }))}
              placeholder="Enter location or use current location"
              className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
        </div>

        {/* Description */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Description *</label>
          <textarea
            value={newReport.description}
            onChange={(e) => setNewReport(prev => ({ ...prev, description: e.target.value }))}
            placeholder="Describe the issue in detail..."
            className="w-full p-3 border rounded-lg h-24 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>

        {/* Image Upload */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Upload Photo</label>
          <div
            onClick={() => fileInputRef.current?.click()}
            className="w-full p-6 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 hover:bg-blue-50 transition-colors text-center"
          >
            <Camera className="w-8 h-8 mx-auto mb-2 text-gray-400" />
            <p className="text-sm text-gray-600">
              {newReport.image ? newReport.image.name : "Tap to add photo (with geotag)"}
            </p>
          </div>
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="hidden"
          />
        </div>

        {/* Priority Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
          <div className="flex space-x-2">
            {['low', 'medium', 'high'].map((priority) => (
              <button
                key={priority}
                onClick={() => setNewReport(prev => ({ ...prev, priority }))}
                className={`flex-1 p-3 rounded-lg border font-medium transition-all ${
                  newReport.priority === priority
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                {priority.charAt(0).toUpperCase() + priority.slice(1)}
              </button>
            ))}
          </div>
        </div>

        {/* Anonymous Reporting */}
        <div className="flex items-center space-x-3">
          <input
            type="checkbox"
            id="anonymous"
            checked={newReport.anonymous}
            onChange={(e) => setNewReport(prev => ({ ...prev, anonymous: e.target.checked }))}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="anonymous" className="text-sm font-medium text-gray-700">
            Report anonymously
          </label>
        </div>

        {/* Submit Button */}
        <button
          onClick={submitReport}
          className="w-full bg-blue-600 text-white py-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors shadow-lg hover:shadow-xl transform hover:scale-105 duration-200"
        >
          Submit Report
        </button>
      </div>
    </div>
  );

  const renderTopics = () => (
    <div className="p-4 pb-20 space-y-4">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-800">Community Issues</h2>
        <button className="p-2 hover:bg-gray-100 rounded-full">
          <Filter className="w-5 h-5" />
        </button>
      </div>

      {/* Search Bar */}
      <div className="relative">
        <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search issues..."
          className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Issues List */}
      <div className="space-y-4">
        {filteredRecords.map((record) => (
          <div
            key={record.id}
            className="bg-white rounded-xl shadow-sm border hover:shadow-md transition-all duration-200 overflow-hidden"
          >
            <div className="p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-800 mb-1">{record.title}</h3>
                  <p className="text-sm text-gray-600 flex items-center">
                    <MapPin className="w-4 h-4 mr-1" />
                    {record.location}
                  </p>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getPriorityColor(record.priority)}`}>
                  {record.priority.toUpperCase()}
                </span>
              </div>

              {/* Progress Bar */}
              <div className="mb-3">
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-600">Progress</span>
                  <span className="font-medium">{record.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-500 ${getStatusColor(record.status)}`}
                    style={{ width: `${record.progress}%` }}
                  ></div>
                </div>
              </div>

              {/* Status and Time */}
              <div className="flex items-center justify-between text-sm mb-3">
                <span className="text-gray-600">{record.lastUpdate}</span>
                <span className={`font-medium ${record.status === 'overdue' ? 'text-red-600' : 'text-gray-600'}`}>
                  {record.timeRemaining}
                </span>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => likeRecord(record.id)}
                    className="flex items-center space-x-1 text-gray-600 hover:text-blue-600 transition-colors"
                  >
                    <ThumbsUp className="w-4 h-4" />
                    <span className="text-sm">{record.likes}</span>
                  </button>
                  <span className="flex items-center space-x-1 text-gray-600">
                    <Users className="w-4 h-4" />
                    <span className="text-sm">{record.reportsCount}</span>
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <button className="p-2 text-gray-400 hover:text-red-600 transition-colors">
                    <Flag className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setSelectedRecord(record)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    View Details
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderMunicipalDashboard = () => (
    <div className="p-4 pb-20 space-y-6">
      <h2 className="text-xl font-bold text-gray-800">Municipality Dashboard</h2>
      
      {/* Stats Cards */}
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-blue-600">{aggregateRecords.length}</div>
          <div className="text-sm text-gray-600">Active Issues</div>
        </div>
        <div className="bg-red-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-red-600">
            {aggregateRecords.filter(r => r.status === 'overdue').length}
          </div>
          <div className="text-sm text-gray-600">Overdue</div>
        </div>
      </div>

      {/* Issues Management */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-800">Manage Issues</h3>
        {aggregateRecords.map((record) => (
          <div key={record.id} className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium">{record.title}</h4>
              <span className={`px-2 py-1 rounded text-xs ${
                record.status === 'overdue' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'
              }`}>
                {record.status.replace('_', ' ').toUpperCase()}
              </span>
            </div>
            <p className="text-sm text-gray-600 mb-3">{record.location}</p>
            <div className="flex items-center space-x-2">
              <button className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700">
                Update Progress
              </button>
              <button className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                Mark Complete
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderProfile = () => (
    <div className="p-4 pb-20 space-y-6">
      <h2 className="text-xl font-bold text-gray-800">Profile</h2>
      
      {/* User Stats */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-100 p-6 rounded-xl">
        <div className="text-center">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold text-xl mx-auto mb-3">
            JK
          </div>
          <h3 className="text-lg font-semibold text-gray-800">Active Citizen</h3>
          <p className="text-gray-600 mb-4">Making a difference in the community</p>
          <div className="flex justify-center items-center space-x-2 text-yellow-600">
            <Star className="w-5 h-5 fill-current" />
            <span className="font-semibold">{userPoints} Points</span>
          </div>
        </div>
      </div>

      {/* Role Toggle */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h3 className="font-medium text-gray-800 mb-3">User Role</h3>
        <div className="flex space-x-2">
          <button
            onClick={() => setUserRole('citizen')}
            className={`flex-1 p-3 rounded-lg font-medium transition-all ${
              userRole === 'citizen'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            Citizen
          </button>
          <button
            onClick={() => setUserRole('municipality')}
            className={`flex-1 p-3 rounded-lg font-medium transition-all ${
              userRole === 'municipality'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            Municipality
          </button>
        </div>
      </div>

      {/* My Reports */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h3 className="font-medium text-gray-800 mb-3">My Reports</h3>
        <div className="space-y-2">
          {reports.length === 0 ? (
            <p className="text-gray-500 text-center py-4">No reports submitted yet</p>
          ) : (
            reports.slice(0, 3).map((report) => (
              <div key={report.id} className="border-l-4 border-blue-400 pl-3 py-2">
                <p className="font-medium text-sm">{report.location}</p>
                <p className="text-xs text-gray-600">{report.description.slice(0, 50)}...</p>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-md mx-auto bg-gray-50 min-h-screen">
      {renderHeader()}
      
      <div className="overflow-y-auto">
        {currentView === 'home' && renderHome()}
        {currentView === 'report' && renderReport()}
        {currentView === 'topics' && renderTopics()}
        {currentView === 'dashboard' && userRole === 'municipality' && renderMunicipalDashboard()}
        {currentView === 'profile' && renderProfile()}
      </div>
      
      {renderBottomNav()}
      
      {/* Detail Modal */}
      {selectedRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-sm w-full max-h-96 overflow-y-auto">
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold">{selectedRecord.title}</h3>
                <button
                  onClick={() => setSelectedRecord(null)}
                  className="p-2 hover:bg-gray-100 rounded-full"
                >
                  ×
                </button>
              </div>
              <p className="text-gray-600 mb-2">{selectedRecord.location}</p>
              <div className="space-y-3">
                <div>
                  <span className="text-sm font-medium">Status: </span>
                  <span className={`px-2 py-1 rounded text-xs ${getPriorityColor(selectedRecord.priority)}`}>
                    {selectedRecord.status.replace('_', ' ').toUpperCase()}
                  </span>
                </div>
                <div>
                  <span className="text-sm font-medium">Progress: </span>
                  <span>{selectedRecord.progress}%</span>
                </div>
                <div>
                  <span className="text-sm font-medium">Reports: </span>
                  <span>{selectedRecord.reportsCount}</span>
                </div>
                <div>
                  <span className="text-sm font-medium">Last Update: </span>
                  <span className="text-sm">{selectedRecord.lastUpdate}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CivicIssueApp;

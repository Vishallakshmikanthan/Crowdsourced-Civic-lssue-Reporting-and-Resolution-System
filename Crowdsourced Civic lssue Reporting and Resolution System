// ============================================
// STEP 1: Create a new React project
// ============================================
// Run these commands in your terminal:
// npx create-react-app civic-issue-app
// cd civic-issue-app
// npm install lucide-react
// npm install -D tailwindcss postcss autoprefixer
// npx tailwindcss init -p

// ============================================
// FILE: tailwind.config.js
// ============================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

// ============================================
// FILE: src/index.css
// ============================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-out;
}

.animate-slide-in {
  animation: slideIn 0.3s ease-out;
}

// ============================================
// FILE: src/App.js
// ============================================
import React, { useState, useEffect, useRef } from 'react';
import { 
  MapPin, Camera, Users, Trophy, MessageCircle, Bell, Search, Filter, 
  ThumbsUp, Flag, Upload, CheckCircle, Clock, AlertTriangle, Star, 
  ArrowLeft, ArrowRight, Plus, Settings, Home, FileText, Target 
} from 'lucide-react';

const CivicIssueApp = () => {
  const [currentView, setCurrentView] = useState('home');
  const [reports, setReports] = useState([]);
  const [userPoints, setUserPoints] = useState(150);
  const [newReport, setNewReport] = useState({
    location: '',
    description: '',
    image: null,
    priority: 'medium',
    anonymous: false,
    category: 'infrastructure'
  });
  const [aggregateRecords, setAggregateRecords] = useState([]);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [userRole, setUserRole] = useState('citizen');
  const [searchTerm, setSearchTerm] = useState('');
  const [notifications] = useState(3);
  const fileInputRef = useRef(null);

  // Sample data initialization
  useEffect(() => {
    setAggregateRecords([
      {
        id: 1,
        title: "Pothole on Main Street",
        location: "Main Street, Sector 15",
        priority: "high",
        status: "in_progress",
        progress: 65,
        reportsCount: 12,
        likes: 8,
        category: "infrastructure",
        timeRemaining: "2 days",
        lastUpdate: "Municipality team assigned",
        images: ["pothole1.jpg"],
        createdAt: new Date(Date.now() - 86400000 * 3),
        updatedAt: new Date(Date.now() - 86400000 * 1)
      },
      {
        id: 2,
        title: "Broken Street Light",
        location: "Park Avenue, Block A",
        priority: "medium",
        status: "pending",
        progress: 20,
        reportsCount: 5,
        likes: 3,
        category: "lighting",
        timeRemaining: "5 days",
        lastUpdate: "Report received",
        images: ["streetlight1.jpg"],
        createdAt: new Date(Date.now() - 86400000 * 5),
        updatedAt: new Date(Date.now() - 86400000 * 2)
      },
      {
        id: 3,
        title: "Garbage Dump Issue",
        location: "Green Valley Road",
        priority: "high",
        status: "overdue",
        progress: 10,
        reportsCount: 18,
        likes: 15,
        category: "sanitation",
        timeRemaining: "Overdue by 3 days",
        lastUpdate: "Escalated to supervisor",
        images: ["garbage1.jpg"],
        createdAt: new Date(Date.now() - 86400000 * 7),
        updatedAt: new Date(Date.now() - 86400000 * 3)
      },
      {
        id: 4,
        title: "Water Leakage",
        location: "Central Plaza",
        priority: "high",
        status: "completed",
        progress: 100,
        reportsCount: 8,
        likes: 12,
        category: "water",
        timeRemaining: "Completed",
        lastUpdate: "Issue resolved successfully",
        images: ["water1.jpg"],
        createdAt: new Date(Date.now() - 86400000 * 10),
        updatedAt: new Date(Date.now() - 86400000 * 1)
      }
    ]);
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewReport(prev => ({ ...prev, image: file }));
    }
  };

  const submitReport = () => {
    if (!newReport.location.trim() || !newReport.description.trim()) {
      alert('Please fill in all required fields');
      return;
    }
    
    const report = {
      id: Date.now(),
      ...newReport,
      timestamp: new Date(),
      status: 'submitted',
      progress: 0,
      reportsCount: 1,
      likes: 0,
      timeRemaining: "7 days",
      lastUpdate: "Report submitted",
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setReports(prev => [report, ...prev]);
    setUserPoints(prev => prev + 10);
    
    // Add to aggregate records
    setAggregateRecords(prev => [report, ...prev]);
    
    // Reset form
    setNewReport({
      location: '',
      description: '',
      image: null,
      priority: 'medium',
      anonymous: false,
      category: 'infrastructure'
    });
    
    alert('Report submitted successfully! You earned 10 points.');
    setCurrentView('topics');
  };

  const likeRecord = (id) => {
    setAggregateRecords(prev => 
      prev.map(record => 
        record.id === id 
          ? { ...record, likes: record.likes + 1 }
          : record
      )
    );
  };

  const updateProgress = (id, newProgress, newStatus) => {
    setAggregateRecords(prev => 
      prev.map(record => 
        record.id === id 
          ? { 
              ...record, 
              progress: newProgress, 
              status: newStatus,
              lastUpdate: `Progress updated to ${newProgress}%`,
              updatedAt: new Date()
            }
          : record
      )
    );
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'completed': return 'bg-green-500';
      case 'in_progress': return 'bg-blue-500';
      case 'pending': return 'bg-yellow-500';
      case 'overdue': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusText = (status) => {
    switch(status) {
      case 'completed': return 'Completed';
      case 'in_progress': return 'In Progress';
      case 'pending': return 'Pending';
      case 'overdue': return 'Overdue';
      case 'submitted': return 'Submitted';
      default: return 'Unknown';
    }
  };

  const filteredRecords = aggregateRecords.filter(record =>
    record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderHeader = () => (
    <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg sticky top-0 z-40">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="bg-white/20 p-2 rounded-full">
            <Target className="w-6 h-6" />
          </div>
          <div>
            <h1 className="text-xl font-bold">CivicConnect</h1>
            <p className="text-sm opacity-90">Report. Track. Resolve.</p>
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2 bg-white/20 px-3 py-1 rounded-full">
            <Trophy className="w-4 h-4" />
            <span className="font-semibold">{userPoints}</span>
          </div>
          <div className="relative">
            <Bell className="w-6 h-6 cursor-pointer hover:scale-110 transition-transform" />
            {notifications > 0 && (
              <div className="absolute -top-1 -right-1 bg-red-500 text-xs rounded-full w-5 h-5 flex items-center justify-center">
                {notifications}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderBottomNav = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg z-40">
      <div className="flex justify-around py-2">
        {[
          { id: 'home', icon: Home, label: 'Home' },
          { id: 'report', icon: Plus, label: 'Report' },
          { id: 'topics', icon: FileText, label: 'Topics' },
          { id: userRole === 'municipality' ? 'dashboard' : 'profile', icon: Settings, label: userRole === 'municipality' ? 'Dashboard' : 'Profile' }
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => setCurrentView(tab.id)}
            className={`flex flex-col items-center p-3 rounded-lg transition-all duration-200 ${
              currentView === tab.id 
                ? 'text-blue-600 bg-blue-50 scale-105' 
                : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
            }`}
          >
            <tab.icon className="w-5 h-5 mb-1" />
            <span className="text-xs font-medium">{tab.label}</span>
          </button>
        ))}
      </div>
    </div>
  );

  const renderHome = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      {/* Welcome Section */}
      <div className="bg-gradient-to-br from-blue-50 to-indigo-100 p-6 rounded-xl shadow-sm">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          Welcome, {userRole === 'municipality' ? 'Municipality' : 'Citizen'}!
        </h2>
        <p className="text-gray-600 mb-4">
          {userRole === 'municipality' 
            ? 'Manage and resolve community issues efficiently.' 
            : 'Help make your community better by reporting civic issues.'}
        </p>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{reports.length}</div>
            <div className="text-sm text-gray-600">
              {userRole === 'municipality' ? 'Total Reports' : 'Your Reports'}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-green-600">
              {userRole === 'municipality' 
                ? aggregateRecords.filter(r => r.status === 'completed').length
                : userPoints
              }
            </div>
            <div className="text-sm text-gray-600">
              {userRole === 'municipality' ? 'Resolved' : 'Points Earned'}
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Quick Actions</h3>
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => setCurrentView('report')}
            className="bg-blue-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105 active:scale-95"
          >
            <Plus className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">Report Issue</span>
          </button>
          <button
            onClick={() => setCurrentView('topics')}
            className="bg-green-600 text-white p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105 active:scale-95"
          >
            <FileText className="w-6 h-6 mx-auto mb-2" />
            <span className="font-medium">View Topics</span>
          </button>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-800">Recent Activity</h3>
        <div className="space-y-2">
          {aggregateRecords.slice(0, 4).map((record) => (
            <div key={record.id} className="bg-white p-4 rounded-lg shadow-sm border hover:shadow-md transition-all duration-200 cursor-pointer"
                 onClick={() => setSelectedRecord(record)}>
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium text-gray-800">{record.title}</h4>
                  <p className="text-sm text-gray-600 flex items-center mt-1">
                    <MapPin className="w-3 h-3 mr-1" />
                    {record.location}
                  </p>
                </div>
                <div className="flex items-center space-x-2">
                  <div className={`w-3 h-3 rounded-full ${getStatusColor(record.status)}`}></div>
                  <span className="text-xs text-gray-500">{record.progress}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Statistics */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <h3 className="font-medium text-gray-800 mb-3">Statistics</h3>
        <div className="grid grid-cols-4 gap-2 text-center">
          <div>
            <div className="text-lg font-bold text-blue-600">
              {aggregateRecords.filter(r => r.status === 'pending').length}
            </div>
            <div className="text-xs text-gray-600">Pending</div>
          </div>
          <div>
            <div className="text-lg font-bold text-yellow-600">
              {aggregateRecords.filter(r => r.status === 'in_progress').length}
            </div>
            <div className="text-xs text-gray-600">In Progress</div>
          </div>
          <div>
            <div className="text-lg font-bold text-red-600">
              {aggregateRecords.filter(r => r.status === 'overdue').length}
            </div>
            <div className="text-xs text-gray-600">Overdue</div>
          </div>
          <div>
            <div className="text-lg font-bold text-green-600">
              {aggregateRecords.filter(r => r.status === 'completed').length}
            </div>
            <div className="text-xs text-gray-600">Completed</div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderReport = () => (
    <div className="p-4 pb-20 space-y-6 animate-fade-in">
      <div className="flex items-center space-x-3 mb-4">
        <button
          onClick={() => setCurrentView('home')}
          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
        </button>
        <h2 className="text-xl font-bold text-gray-800">Report an Issue</h2>
      </div>

      <div className="space-y-4">
        {/* Category Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
          <select
            value={newReport.category}
            onChange={(e) => setNewReport(prev => ({ ...prev, category: e.target.value }))}
            className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
          >
            <option value="infrastructure">🏗️ Infrastructure</option>
            <option value="sanitation">🗑️ Sanitation</option>
            <option value="lighting">💡 Street Lighting</option>
            <option value="water">💧 Water Supply</option>
            <option value="traffic">🚦 Traffic</option>
            <option value="environment">🌱 Environment</option>
            <option value="safety">🛡️ Safety</option>
            <option value="other">📋 Other</option>
          </select>
        </div>

        {/* Location Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Location *</label>
          <div className="relative">
            <MapPin className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="text"
              value={newReport.location}
              onChange={(e) => setNewReport(prev => ({ ...prev, location: e.target.value }))}
              placeholder="Enter location or use current location"
              className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              required
            />
          </div>
          <button className="mt-2 text-sm text-blue-600 hover:text-blue-700 transition-colors">
            📍 Use Current Location
          </button>
        </div>

        {/* Description */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Description *</label>
          <textarea
            value={newReport.description}
            onChange={(e) => setNewReport(prev => ({ ...prev, description: e.target.value }))}
            placeholder="Describe the issue in detail... What exactly is the problem? When did you notice it?"
            className="w-full p-3 border rounded-lg h-24 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
            required
          />
          <div className="text-xs text-gray-500 mt-1">
            {newReport.description.length}/500 characters
          </div>
        </div>

        {/* Image Upload */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Upload Photo</label>
          <div
            onClick={() => fileInputRef.current?.click()}
            className="w-full p-6 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 hover:bg-blue-50 transition-all text-center group"
          >
            <Camera className="w-8 h-8 mx-auto mb-2 text-gray-400 group-hover:text-blue-500 transition-colors" />
            <p className="text-sm text-gray-600 group-hover:text-blue-600 transition-colors">
              {newReport.image ? (
                <span className="text-green-600">📸 {newReport.image.name}</span>
              ) : (
                "Tap to add photo (with geotag)"
              )}
            </p>
            <p className="text-xs text-gray-500 mt-1">Photos help resolve issues faster</p>
          </div>
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            capture="environment"
            onChange={handleImageUpload}
            className="hidden"
          />
        </div>

        {/* Priority Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Priority Level</label>
          <div className="grid grid-cols-3 gap-2">
            {[
              { value: 'low', label: 'Low', emoji: '🟢', desc: 'Minor issue' },
              { value: 'medium', label: 'Medium', emoji: '🟡', desc: 'Moderate concern' },
              { value: 'high', label: 'High', emoji: '🔴', desc: 'Urgent action needed' }
            ].map((priority) => (
              <button
                key={priority.value}
                type="button"
                onClick={() => setNewReport(prev => ({ ...prev, priority: priority.value }))}
                className={`p-3 rounded-lg border font-medium transition-all text-center ${
                  newReport.priority === priority.value
                    ? 'border-blue-500 bg-blue-50 text-blue-700 scale-105'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <div className="text-lg">{priority.emoji}</div>
                <div className="text-sm">{priority.label}</div>
                <div className="text-xs text-gray-500">{priority.desc}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Anonymous Reporting */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="anonymous"
              checked={newReport.anonymous}
              onChange={(e) => setNewReport(prev => ({ ...prev, anonymous: e.target.checked }))}
              className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500 transition-all"
            />
            <label htmlFor="anonymous" className="text-sm font-medium text-gray-700 cursor-pointer">
              Report anonymously
            </label>
          </div>
          <p className="text-xs text-gray-500 mt-2 ml-8">
            Your identity will be hidden, but you can still track the progress
          </p>
        </div>

        {/* Submit Button */}
        <button
          onClick={submitReport}
          disabled={!newReport.location.trim() || !newReport.description.trim()}
          className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95 duration-200"
        >
          {!newReport.location.trim() || !newReport.description.trim() 
            ? 'Please fill required fields' 
            : '🚀 Submit Report (+10 points)'}
        </button>
      </div>
    </div>
  );

  const renderTopics = () => (
    <div className="p-4 pb-20 space-y-4 animate-fade-in">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-800">Community Issues</h2>
        <div className="flex items-center space-x-2">
          <div className="text-sm text-gray-600">
            {filteredRecords.length} issues
          </div>
          <button className="p-2 hover:bg-gray-100 rounded-full transition-colors">
            <Filter className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Search Bar */}
      <div className="relative">
        <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search issues, locations, or categories..."
          className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
        />
      </div>

      {/* Filter Tabs */}
      <div className="flex space-x-2 overflow-x-auto pb-2">
        {['all', 'pending', 'in_progress', 'overdue', 'completed'].map((status) => (
          <button
            key={status}
            className="px-4 py-2 rounded-full bg-gray-100 text-gray-700 text-sm font-medium whitespace-nowrap hover:bg-gray-200 transition-colors"
          >
            {status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
          </button>
        ))}
      </div>

      {/* Issues List */}
      <div className="space-y-4">
        {filteredRecords.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">🔍</div>
            <h3 className="text-lg font-medium text-gray-800 mb-2">No issues found</h3>
            <p className="text-gray-600">Try adjusting your search terms</p>
          </div>
        ) : (
          filteredRecords.map((record) => (
            <div
              key={record.id}
              className="bg-white rounded-xl shadow-sm border hover:shadow-md transition-all duration-200 overflow-hidden group"
            >
              <div className="p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-800 mb-1 group-hover:text-blue-600 transition-colors">
                      {record.title}
                    </h3>
                    <p className="text-sm text-gray-600 flex items-center">
                      <MapPin className="w-4 h-4 mr-1 flex-shrink-0" />
                      {record.location}
                    </p>
                    <div className="flex items-center space-x-2 mt-1">
                      <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                        {record.category}
                      </span>
                      <span className="text-xs text-gray-500">
                        {new Date(record.createdAt).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium border flex-shrink-0 ${getPriorityColor(record.priority)}`}>
                    {record.priority.toUpperCase()}
                  </span>
                </div>

                {/* Progress Bar */}
                <div className="mb-3">
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-gray-600">Progress</span>
                    <span className="font-medium">{record.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full transition-all duration-1000 ease-out ${getStatusColor(record.status)}`}
                      style={{ width: `${record.progress}%` }}
                    ></div>
                  </div>
                </div>

                {/* Status and Time */}
                <div className="flex items-center justify-between text-sm mb-3">
                  <span className="text-gray-600">{record.lastUpdate}</span>
                  <span className={`font-medium flex items-center ${record.status === 'overdue' ? 'text-red-600' : 'text-gray-600'}`}>
                    {record.status === 'overdue' && <Clock className="w-3 h-3 mr-1" />}
                    {record.timeRemaining}
                  </span>
                </div>

                {/* Action Buttons */}
                <div className="flex items-center justify-between pt-2 border-t">
                  <div className="flex items-center space-x-4">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        likeRecord(record.id);
                      }}
                      className="flex items-center space-x-1 text-gray-600 hover:text-blue-600 transition-colors group"
                    >
                      <ThumbsUp className="w-4 h-4
